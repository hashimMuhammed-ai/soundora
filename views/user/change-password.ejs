<%- include("../../views/partials/user/header") %>

<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-rbsA2VBKQjvIj3N2cF5D5JoI6qdx2Ptt06HLZ+LTWTBO1CnJFM8jK5tX2NcPtT7T" crossorigin="anonymous">

<style>
    /* Custom Modal Styles */
    .custom-modal-overlay {
        display: none;
        position: fixed;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        z-index: 1000;
        justify-content: center;
        align-items: center;
    }

    .custom-modal {
        background-color: white;
        border-radius: 8px;
        width: 90%;
        max-width: 500px;
        box-shadow: 0 5px 15px rgba(0, 0, 0, 0.3);
        animation: modalFadeIn 0.3s ease-out;
    }

    .custom-modal-header {
        display: flex;
        justify-content: space-between;
        align-items: center;
        padding: 15px 20px;
        border-bottom: 1px solid #dee2e6;
    }

    .custom-modal-title {
        font-size: 1.25rem;
        font-weight: 500;
        margin: 0;
    }

    .custom-close-button {
        background: transparent;
        border: none;
        font-size: 1.5rem;
        cursor: pointer;
        padding: 0;
        line-height: 1;
    }

    .custom-modal-body {
        padding: 20px;
    }

    @keyframes modalFadeIn {
        from { opacity: 0; transform: translateY(-20px); }
        to { opacity: 1; transform: translateY(0); }
    }
    .card-header{
        background-color:rgb(248 248 248);
    }
    .card-body{
        background-color:rgb(255 243 243)
    }
    .verify-pass{
        margin-top: 10px;
            background: linear-gradient(45deg, #ffa500, #ffd700);
            border: none;
            color: #000;
            font-weight: 500;
            padding: 10px 20px;
            border-radius: 5px;
            transition: all 0.3s ease;
    }

    .verify-pass:hover {
        background: linear-gradient(45deg, #ff8c00, #ffc000);
            transform: translateY(-2px);
            box-shadow: 0 4px 8px rgba(255, 165, 0, 0.2);
            color: #000;
    }
</style>

<section class="vh-90" style="padding: 50px 0; margin-bottom: 141px;">
    <div class="container">
        <div class="row justify-content-center">
            <div class="col-md-6">
                <div class="card">
                    <div class="card-header">
                        <h4 class="text-center">Change Password</h4>
                    </div>
                    <div class="card-body">
                        <form id="currentPasswordForm">
                            <div class="mb-3">
                                <label for="currentPassword" class="form-label" >Current Password</label>
                                <input type="password" class="form-control" id="currentPassword" name="currentPassword" >
                                <div class="invalid-feedback">
                                    Please enter your current password
                                </div>
                            </div>
                            <div class="text-center">
                                <button type="submit" class="verify-pass" id="verifyButton">Verify Password</button>
                            </div>
                        </form>
                    </div>
                </div>
            </div>
        </div>
    </div>
</section>

<!-- Custom Password Change Modal -->
<div class="custom-modal-overlay" id="customPasswordChangeModal">
    <div class="custom-modal">
        <div class="custom-modal-header">
            <h5 class="custom-modal-title">Set New Password</h5>
            <button type="button" class="custom-close-button" id="closeCustomModal">&times;</button>
        </div>
        <div class="custom-modal-body">
            <form id="newPasswordForm">
                <div class="mb-3">
                    <label for="newPassword" class="form-label">New Password</label>
                    <input type="password" class="form-control" id="newPassword" name="newPassword" >
                    <div class="invalid-feedback" id="newPasswordError"></div>
                </div>
                <div class="mb-3">
                    <label for="confirmPassword" class="form-label">Confirm New Password</label>
                    <input type="password" class="form-control" id="confirmPassword" name="confirmPassword" >
                    <div class="invalid-feedback" id="confirmPasswordError"></div>
                </div>
                <div class="text-center">
                    <button type="submit" class="verify-pass">Change Password</button>
                </div>
            </form>
        </div>
    </div>
</div>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js" integrity="sha384-JE/XzK9Jt3Bo2WbE3Bxj6i/WdLaOJvH4Pe0CrvlJ8S/f9e/aBnp4UmEOV8SmjIHv" crossorigin="anonymous"></script>

<script>
    let isCurrentPasswordVerified = false;
    const customModal = document.getElementById('customPasswordChangeModal');
    const closeModalBtn = document.getElementById('closeCustomModal');

    function openModal() {
        customModal.style.display = 'flex';
        document.body.style.overflow = 'hidden'; 
    }

    function closeModal() {
        customModal.style.display = 'none';
        document.body.style.overflow = ''; 
        
        isCurrentPasswordVerified = false;
        
        document.getElementById('newPasswordForm').reset();
        document.getElementById('newPasswordError').textContent = '';
        document.getElementById('confirmPasswordError').textContent = '';
    }

    closeModalBtn.addEventListener('click', closeModal);
    
    customModal.addEventListener('click', function(event) {
        if (event.target === customModal) {
            
            if (!isCurrentPasswordVerified) {
                closeModal();
            }
        }
    });

    document.getElementById('currentPasswordForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const currentPassword = document.getElementById('currentPassword').value;
        
        try {
            const response = await fetch('/verify-current-password', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ currentPassword })
            });
            
            const data = await response.json();
            
            if (data.success) {
                isCurrentPasswordVerified = true;
                
                document.getElementById('newPasswordError').textContent = '';
                document.getElementById('confirmPasswordError').textContent = '';
                
                document.getElementById('newPasswordForm').reset();
                
                openModal();
            } else {
                isCurrentPasswordVerified = false;
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: data.message || 'Current password is incorrect'
                });
            }
        } catch (error) {
            isCurrentPasswordVerified = false;
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Something went wrong. Please try again.'
            });
        }
    });

    document.getElementById('newPasswordForm').addEventListener('submit', async (e) => {
        e.preventDefault();
        
        // Check if current password was verified
        if (!isCurrentPasswordVerified) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Please verify your current password first'
            });
            return;
        }
        
        const newPassword = document.getElementById('newPassword').value;
        const confirmPassword = document.getElementById('confirmPassword').value;
        const newPasswordError = document.getElementById('newPasswordError');
        const confirmPasswordError = document.getElementById('confirmPasswordError');
        
        // Reset error messages and styles
        newPasswordError.textContent = '';
        confirmPasswordError.textContent = '';
        document.getElementById('newPassword').classList.remove('is-invalid');
        document.getElementById('confirmPassword').classList.remove('is-invalid');
        
        // Validation
        let hasError = false;
        
        if (newPassword.length < 6) {
            newPasswordError.textContent = 'Password must be at least 6 characters';
            document.getElementById('newPassword').classList.add('is-invalid');
            hasError = true;
        }
        
        if (newPassword !== confirmPassword) {
            confirmPasswordError.textContent = 'Passwords do not match';
            document.getElementById('confirmPassword').classList.add('is-invalid');
            hasError = true;
        }
        
        if (hasError) return;
        
        try {
            const response = await fetch('/update-password', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({ newPassword })
            });
            
            const data = await response.json();
            
            if (data.success) {
                
                isCurrentPasswordVerified = false;
             
                closeModal();
                
            
                document.getElementById('currentPasswordForm').reset();
                document.getElementById('newPasswordForm').reset();
                
             
                Swal.fire({
                    icon: 'success',
                    title: 'Success',
                    text: 'Password changed successfully'
                }).then((result) => {
                    if (result.isConfirmed) {
                        window.location.href = '/userProfile';
                    }
                });
            } else {
                Swal.fire({
                    icon: 'error',
                    title: 'Error',
                    text: data.message || 'Failed to update password'
                });
            }
        } catch (error) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Something went wrong. Please try again.'
            });
        }
    });

    // Close modal with ESC key
    document.addEventListener('keydown', function(event) {
        if (event.key === 'Escape' && !isCurrentPasswordVerified) {
            closeModal();
        }
    });
</script>

<%- include("../../views/partials/user/footer") %>