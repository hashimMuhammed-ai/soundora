<%- include("../../views/partials/user/header") %>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/sweetalert2@11/dist/sweetalert2.min.css">
<script src="https://checkout.razorpay.com/v1/checkout.js"></script>



<style>
    * {
        margin: 0;
        padding: 0;
        box-sizing: border-box;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
    }

    body {
        background-color: #f5f5f5;
        padding: 0rem;
    }

    .container {
        max-width: 1200px;
        margin: 0 auto;
    }

    .card {
        background: white;
        border-radius: 10px;
        padding: 2rem;
        box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
        margin-bottom: 2rem;
        margin-top: 51px;
    }

    .section-title {
        color: #333;
        margin-bottom: 1.5rem;
        font-size: 1.5rem;
        border-bottom: 2px solid #eee;
        padding-bottom: 0.5rem;
    }

    .info-grid {
    display: grid;
    grid-template-columns: repeat(auto-fit, minmax(200px, 1fr)); /* Responsive two-column layout */
    gap: 10px;
}

.info-item {
    background: #ffffff;
    padding: 10px;
    border-radius: 5px;
    /* box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1); */
    text-align: center; /* Centers content */
}

/* Mobile responsiveness */
@media (max-width: 600px) {
    .info-grid {
        grid-template-columns: repeat(2, 1fr); /* Stack items in a single column for smaller screens */
    }
}


    .info-label {
        color: #666;
        font-size: 0.9rem;
        margin-bottom: 0.3rem;
    }

    .info-value {
        color: #333;
        font-weight: 500;
    }

    .status {
        display: inline-block;
        padding: 0.3rem 1rem;
        border-radius: 20px;
        font-size: 0.9rem;
        font-weight: 500;
    }

    .status-paid {
        background: #e3f9e5;
        color: #1b4332;
    }

    .status-delivered {
        background: #e0f2fe;
        color: #075985;
    }

    .status-pending {
        background: #fff3dc;
        color: #945d0c;
    }

    .status-cancelled {
        background: #fee2e2;
        color: #991b1b;
    }

    .status-failed {
    background: #fee2e2;
    color: #991b1b;
    }

    .products-table {
        width: 100%;
        border-collapse: collapse;
        margin-top: 1rem;
    }

    .products-table th {
        background: #f8f9fa;
        padding: 1rem;
        text-align: left;
        font-weight: 600;
        color: #444;
    }

    .products-table td {
        padding: 1rem;
        border-bottom: 1px solid #eee;
    }

    .product-image {
        width: 80px;
        height: 80px;
        object-fit: cover;
        border-radius: 5px;
    }

    .product-name {
        color: #2563eb;
        font-weight: 500;
    }

    .total-row {
        font-weight: 600;
        background: #f8f9fa;
    }

    .btn-cancel {
        background-color: #dc3545;
        color: white;
        padding: 10px 20px;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        font-size: 14px;
        margin-top: 20px;
        transition: background-color 0.3s;
    }

    .btn-cancel:hover {
        background-color: #c82333;
    }

    .action-row {
        display: flex;
        justify-content: space-between;
        align-items: center;
        margin-top: 20px;
        padding: 15px;
        border-top: 1px solid #dee2e6;
    }

    /* Modal styles */
    .modal {
        display: none;
        position: fixed;
        z-index: 1000;
        left: 0;
        top: 0;
        width: 100%;
        height: 100%;
        background-color: rgba(0, 0, 0, 0.5);
        backdrop-filter: blur(5px);
        animation: fadeIn 0.3s ease-out;
    }

    @keyframes fadeIn {
        from { opacity: 0; }
        to { opacity: 1; }
    }

    /* Modal Content */
    .modal-content {
        position: relative;
        background-color: #fff;
        margin: 15vh auto;
        padding: 0;
        width: 90%;
        max-width: 450px;
        border-radius: 12px;
        box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
        transform-origin: top;
        animation: slideIn 0.4s ease-out;
    }

    @keyframes slideIn {
        from {
            transform: translateY(-30px);
            opacity: 0;
        }
        to {
            transform: translateY(0);
            opacity: 1;
        }
    }

    /* Modal Header */
    .modal-header {
        padding: 1rem;
        border-bottom: 1px solid #edf2f7;
        position: relative;
    }

    .modal-header h2 {
        margin: 0;
        color: #2d3748;
        font-size: 1.25rem;
        font-weight: 600;
    }

    /* Close Button */
    .close-btn {
        position: absolute;
        right: 1rem;
        top: 0.75rem;
        width: 24px;
        height: 24px;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        font-size: 1.5rem;
        color: #718096;
        transition: color 0.2s;
        background: none;
        border: none;
        padding: 0;
        z-index: 1001;
    }

    .close-btn:hover {
        color: #2d3748;
    }

    /* Modal Body */
    .modal-body {
        padding: 1rem;
    }

    .modal-body p {
        color: #4a5568;
        margin-bottom: 1rem;
        line-height: 1.5;
        font-size: 0.95rem;
    }

    /* Form Elements */
    .form-group {
        margin-bottom: 1rem;
    }

    .form-group label {
        display: block;
        margin-bottom: 0.5rem;
        color: #4a5568;
        font-weight: 500;
        font-size: 0.95rem;
    }

    #cancelReason {
        width: 100%;
        padding: 0.5rem 0.75rem;
        border: 2px solid #e2e8f0;
        border-radius: 6px;
        font-size: 0.95rem;
        color: #2d3748;
        background-color: #fff;
        transition: all 0.2s;
        appearance: none;
        background-image: url("data:image/svg+xml,%3Csvg xmlns='http://www.w3.org/2000/svg' width='24' height='24' viewBox='0 0 24 24' fill='none' stroke='%234a5568' stroke-width='2' stroke-linecap='round' stroke-linejoin='round'%3E%3Cpolyline points='6 9 12 15 18 9'%3E%3C/polyline%3E%3C/svg%3E");
        background-repeat: no-repeat;
        background-position: right 0.75rem center;
        background-size: 1em;
    }

    #cancelReason:focus {
        outline: none;
        border-color: #4299e1;
        box-shadow: 0 0 0 3px rgba(66, 153, 225, 0.15);
    }

    /* Modal Footer */
    .modal-footer {
        padding: 1rem;
        border-top: 1px solid #edf2f7;
        display: flex;
        justify-content: flex-end;
        gap: 0.75rem;
    }

    /* Buttons */
    .btn-cancel,
    .btn-confirm {
        min-width: 100px;
        padding: 0.5rem 1rem;
        border-radius: 6px;
        font-size: 0.875rem;
        font-weight: 500;
        cursor: pointer;
        transition: all 0.2s;
    }

    .btn-cancel {
        background-color: #e53e3e;
        color: #fff;
        border: 2px solid #e53e3e;
    }

    .btn-cancel:hover {
        background-color: #c53030;
        border-color: #c53030;
    }

    .btn-confirm {
        background-color: #fff;
        color: #4a5568;
        border: 2px solid #e2e8f0;
    }

    .btn-confirm:hover {
        background-color: #f7fafc;
        border-color: #cbd5e0;
    }

    @media (max-width: 640px) {
        .modal-content {
            margin: 10vh auto;
            max-height: 80vh;
            overflow-y: auto;
        }

        .modal-footer {
            padding: 1rem;
        }

        .btn-cancel,
        .btn-confirm {
            min-width: 120px;
        }
    }

    @media (max-width: 768px) {
        body {
            padding: 1rem;
        }
        
        .card {
            padding: 1rem;
        }

        .products-table {
            display: block;
            overflow-x: auto;
        }
    }

    .invoice-btn {
        background-color: black;
        color: white;
        border: none;
        padding: 6px 15px;
        font-size: 16px;
        font-weight: bold;
        text-transform: uppercase;
        border-radius: 5px;
        transition: all 0.3sease;
        height: 38px;
}

.invoice-btn:hover {
    background-color: #333;
    color: #f1c40f; /* Optional golden effect */
    transform: scale(1.05);
}

.retry-btn {
    background-color: lightgreen;
    color: rgb(5, 75, 0);
    border: none;
    padding: 6px 15px;
    font-size: 16px;
    font-weight: bold;
    text-transform: uppercase;
    border-radius: 5px;
    transition: all 0.3s ease;
    height: 38px;
    cursor: pointer;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
}

.retry-btn:hover {
    background-color: rgb(119, 238, 119);
    color: rgb(5, 75, 0);
    transform: scale(1.05);
    box-shadow: 0 4px 10px rgba(0, 0, 0, 0.3);
}

.retry-btn:active {
    background-color: rgb(100, 220, 100);
    transform: scale(0.98);
    transition: all 0.1s ease;
}

</style>

<div class="container">
    <% if (order) { %>
        <!-- Order Information Section -->
        <div class="card">
            <div style="display: flex; justify-content: space-between;">
            <h2 class="section-title">Order Information</h2>
              <% if (order.orderStatus === 'delivered' || order.orderStatus === 'shipped' || order.orderStatus === 'Return rejected' || order.orderStatus === 'Return approved' || order.orderStatus === 'Return requested') { %>
              <a href="/invoice/<%= order._id %>" class="invoice-btn">Invoice</a>
              <% } %>
            </div>
            
            <div class="info-grid">
                <div class="info-item">
                    <div class="info-label">Order ID</div>
                    <div class="info-value">#<%= order.orderId || order._id %></div>
                </div>
                <div class="info-item">
                    <div class="info-label">Order Date</div>
                    <div class="info-value"><%= new Date(order.createdAt).toLocaleString() %></div>
                </div>
                <div class="info-item">
                    <div class="info-label">Order Status</div>
                    <div class="info-value">
                        <span class="status status-<%= order.orderStatus ? order.orderStatus.toLowerCase() : 'pending' %>">
                            <%= order.orderStatus || 'Pending' %>
                        </span>
                    </div>
              </div>
                <div class="info-item">
                    <div class="info-label">Payment Method</div>
                    <div class="info-value"><%= order.payment_method || 'N/A' %></div>
                </div>
                <div class="info-item">
                  <div class="info-label">Payment Status</div>
                  <div class="info-value">
                      <% if (order.paymentStatus === 'refunded') { %>
                          <span class="status status-delivered">Refunded</span>
                      <% } else if (order.paymentStatus === 'success' || order.orderStatus === 'delivered' || order.orderStatus === 'Return rejected' || order.orderStatus === 'Return approved' || order.orderStatus === 'Return requested') { %>
                          <span class="status status-delivered">Success</span>
                      <% } else if (order.orderStatus === 'cancelled') { %>
                          <span class="status status-cancelled">Cancelled</span>
                      <% } else if (order.orderStatus === 'failed') { %>
                          <span class="status status-cancelled">Failed</span>
                          <button class="retry-btn" onclick="retryPayment('<%= order._id %>')">Retry</button>
                      <% } else { %>
                          <span class="status status-pending">Pending</span>
                      <% } %>
                  </div>
              </div>
                <div class="info-item">
                    <div class="info-label">Total Amount</div>
                    <div class="info-value">₹<%= order.totalAmount || 0 %></div>
                </div>
                <div class="info-item">
                    <div class="info-label">Discount</div>
                    <div class="info-value" style="color: green;">₹<%= order.discount || 0 %></div>
                </div>

                <% if(order.orderStatus === "Return rejected"){  %> 
                <div class="info-item">
                    <div class="info-label">Reason for rejecting order</div>
                    <div class="info-value"><%=order.adminReturnStatus %></div>
                </div>
                <% } %>
            </div>
        </div>

        <!-- Delivery Address Section -->
        <div class="card">
            <h2 class="section-title">Delivery Address</h2>
            <div class="info-grid">
                <% if (order.address && Object.keys(order.address).length > 0) { %>
                    <div class="info-item">
                        <div class="info-label">Delivery Place</div>
                        <div class="info-value"><%= order.address.landMark|| 'N/A' %></div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Phone Number</div>
                        <div class="info-value">
                            <%= order.address.phone || 'N/A' %>
                            <% if (order.address.altPhone) { %>
                                <br>Alt: <%= order.address.altPhone %>
                            <% } %>
                        </div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Address Type</div>
                        <div class="info-value"><%= order.address.addressType || 'N/A' %></div>
                    </div>
                    <div class="info-item">
                        <div class="info-label">Address</div>
                        <div class="info-value">
                            <%= order.address.name %> <br>
                            <% if (order.address.landMark) { %>
                                LandMark:<%= order.address.landMark %><br>
                            <% } %>
                            <%= order.address.city || '' %>
                            <% if (order.address.state) { %>
                                , <%= order.address.state %>
                            <% } %>
                            <% if (order.address.pincode) { %>
                                <%= order.address.pincode %>
                            <% } %>
                        </div>
                    </div>
                <% } else { %>
                    <div class="info-item">
                        <div class="info-value">Address information not available</div>
                    </div>
                <% } %>
            </div>
        </div>

        <!-- Ordered Items Section -->
<div class="card">
            <h2 class="section-title">Ordered Items</h2>
            <table class="products-table">
                <thead>
                    <tr>
                        <th>Product</th>
                        <th>Name</th>
                        <th>Price</th>
                        <th>Quantity</th>
                        <th>Total</th>
                       
                        <% if (order.orderStatus !== 'cancelled' && order.orderStatus !== 'delivered' && order.orderStatus !== 'Return requested' && order.orderStatus !== 'Return approved') { %>
                            <th>Actions</th>
                        <% } %>
                    </tr>
                </thead>
                <tbody>
                    <% if (order.items && order.items.length > 0) { %>
                        <% order.items.forEach(item => { %>
                            <% if (item && item.productId) { %>
                                <tr>
                                    <td>
                                        <img src="/uploads/product-images/<%= item.productId.productImages ? item.productId.productImages[0] : 'default.jpg' %>" 
                                            alt="<%= item.productId.productName || 'Product Image' %>" 
                                            class="product-image">
                                    </td>
                                    <td class="product-name"><%= item.productId.productName%></td>
                                    <td>₹<%= item.price || 0 %></td>
                                    <td><%= item.quantity || 1 %></td>
                                    <td>₹<%= (item.price || 0) * (item.quantity || 1) %></td>
                                    <% if (order.orderStatus !== 'cancelled' && order.orderStatus !== 'delivered' && order.orderStatus !== 'returned' &&  order.orderStatus !== 'failed' && order.orderStatus !== 'Return approved' && order.orderStatus !== 'Return requested' && order.orderStatus !== 'Return rejected') { %>
                                    <td>                                       
                                        <button class="btn-cancel" style="margin-top: -5px" onclick="openModal('<%= item._id %>')">
                                            <i class="fas fa-times-circle"></i> Cancel
                                        </button>   
                                    </td>
                                    <% } %>
                                </tr>
                            <% } %>
                        <% }); %>
                        <tr class="total-row">
                            <td colspan="<%= order.orderStatus !== 'cancelled' && order.orderStatus !== 'delivered' && order.orderStatus !== 'Return requested' && order.orderStatus !== 'Return approved' ? 5 : 4 %>" style="text-align: right;">Total Amount:</td>
                            <td>₹<%= order.totalAmount || order.total || 0 %></td>
                        </tr>

                    <% } else { %>
                        <tr>
                            <td colspan="6" class="text-center">No items found in this order.</td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
            <% if (order.items && order.items.length > 0) { %>
    <div class="action-row">
        <% if (order.orderStatus !== 'cancelled' && order.orderStatus !== 'delivered' && order.orderStatus !== 'returned' &&  order.orderStatus !== 'failed' && order.orderStatus !== 'Return approved' && order.orderStatus !== 'Return requested' && order.orderStatus !== 'Return rejected') { %>
            <button class="btn-cancel" onclick="openModal()">
                <i class="fas fa-times-circle"></i> Cancel Order
            </button>
        <% } else if (order.orderStatus === 'delivered') { %>
            <button class="btn-cancel" onclick="openReturnModal('<%= order._id %>')">Return Order</button>
        <% } %>
        <div class="">
            <div class="continue__btn">
                <a href="/userProfile">Go To Profile</a>
            </div>
        </div>
    </div>
<% } %>
         
        </div>
    <% } else { %>
        <div class="card">
            <div class="text-center">
                <h2>Order not found</h2>
                <p>The requested order could not be found.</p>
                <a href="/profile" class="btn btn-primary">Back to Profile</a>
            </div>
        </div>
    <% } %>
</div>

<div id="cancelOrderModal" class="modal">
    <div class="modal-content">
        <span class="close-btn" onclick="closeModal()">&times;</span>
        <div class="modal-header">
            <h2>Cancel Order</h2>
        </div>
        <div class="modal-body">
            <p>Are you sure you want to cancel this order? This action cannot be undone.</p>
            <div class="form-group">
                <label for="cancelReason">Reason for cancellation:</label>
                <select id="cancelReason" onchange="cancelReason()">
                    <option value="">Select a reason</option>
                    <option value="changed_mind">Changed my mind</option>
                    <option value="wrong_item">Ordered wrong item</option>
                    <option value="shipping_time">Shipping time too long</option>
                    <option value="price_issue">Found better price elsewhere</option>
                    <option value="other">Other</option>
                </select>
            </div>

            <!-- Hidden input for "Other" reason -->
            <div id="otherReasonWrapper" style="display: none; margin-top: 10px;">
                <input type="text" style="padding: 7px; margin-top: -7px; margin-left: 7px;" id="otherReason" placeholder="Enter your reason" />
            </div>
        </div>
        <div class="modal-footer">
            <button type="button" class="btn-cancel" onclick="closeModal()">Cancel</button>
            <button type="button" style="margin-bottom: -11px;" class="btn-confirm" onclick="confirmCancel()">Confirm</button>
        </div>
    </div>
</div>


<div id="returnModal" class="modal">
    <div class="modal-content">
        <div class="modal-header">
            <h2>Return Order</h2>
            <button class="close-btn" onclick="closeReturnModal()">&times;</button>
        </div>
        <div class="modal-body">
            <form id="returnForm">
                <input type="hidden" id="orderId">
                <div class="form-group">
                    <label for="returnReason">Reason for Return:</label>
                    <textarea id="returnReason" required></textarea>
                </div>
                <div class="modal-footer">
                    <button type="button" class="btn-cancel" onclick="closeReturnModal()">Cancel</button>
                    <button type="submit" class="btn-confirm">Submit Request</button>
                </div>
            </form>
        </div>
    </div>
</div>



<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>
<script>


 function cancelReason () {
    const cancelReasonSelect = document.getElementById('cancelReason');
    const otherWrapper = document.getElementById('otherReasonWrapper');

     otherWrapper.style.display = (cancelReasonSelect.value === 'other') ? 'block' : 'none';
        
    
};




function openReturnModal(orderId) {
        document.getElementById("orderId").value = orderId;
        document.getElementById("returnModal").style.display = "block";
    }

    function closeReturnModal() {
        document.getElementById("returnModal").style.display = "none";
    }

    document.getElementById("returnForm").addEventListener("submit", async (e) => {
        e.preventDefault();
        const orderId = document.getElementById("orderId").value;
        const reason = document.getElementById("returnReason").value;

        const response = await fetch(`/returnOrder/${orderId}`, {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ reason })
        });

        const result = await response.json();
        if (result.success) {
            Swal.fire("Success", "Return request submitted!", "success").then(() => {
                location.reload();
            });
        } else {
            Swal.fire("Error", "Something went wrong!", "error");
        }
    });


  let currentItemId = null;

function openModal(itemId = null) {
    currentItemId = itemId;
    const modal = document.getElementById('cancelOrderModal');
    const title = modal.querySelector('.modal-header h2');
    const bodyP = modal.querySelector('.modal-body p');
    if (itemId) {
        title.textContent = 'Cancel Item';
        bodyP.textContent = 'Are you sure you want to cancel this item? This action cannot be undone.';
    } else {
        title.textContent = 'Cancel Order';
        bodyP.textContent = 'Are you sure you want to cancel this order? This action cannot be undone.';
    }
    
    modal.style.display = 'block';

}

function closeModal() {
    document.getElementById('cancelOrderModal').style.display = 'none';
    currentItemId = null;
}

async function confirmCancel() {
    let reason = document.getElementById('cancelReason').value;

    if (!reason) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Please select a reason'
        });
        return;
    }

    if (reason === 'other') {
        const otherReason = document.getElementById('otherReason').value.trim();
        if (!otherReason) {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: 'Please specify your reason'
            });
            return;
        }
        reason = otherReason; 
    }

    try {
        const orderId = '<%= order._id %>';
        const body = { reason };
        
        if (currentItemId) {
            body.itemId = currentItemId;
        }

        const response = await fetch(`/cancelOrder/${orderId}`, {
            method: 'PATCH',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(body)
        });

        const data = await response.json();

        if (data.success) {
            await Swal.fire({
                icon: 'success',
                title: 'Success',
                text: data.message,
                showConfirmButton: false,
                timer: 1500
            });
            window.location.replace('/viewOrder/' + orderId);
        } else {
            Swal.fire({
                icon: 'error',
                title: 'Error',
                text: data.message,
                showConfirmButton: false,
                timer: 1500
            });
        }
    } catch (error) {
        Swal.fire({
            icon: 'error',
            title: 'Error',
            text: 'Failed to cancel order',
            showConfirmButton: false,
            timer: 1500
        });
    }

    closeModal();
}


    async function retryPayment(orderId) {
        try {
        const response = await fetch(`/retryPayment/${orderId}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({orderId})
        })
        const data = await response.json();
        console.log(data);

        
        if (data.success) {
                const options = {
                    key: data.key,
                    amount: data.amount,
                    currency: data.currency,
                    name: "Soundora",
                    description: "Speaker Purchase Retry",
                    order_id: data.order_id,
                    handler: function (response) {
                        Swal.fire({
                            title: 'Processing',
                            text: 'Verifying your payment...',
                            allowOutsideClick: false,
                            allowEscapeKey: false,
                            showConfirmButton: false,
                            didOpen: () => Swal.showLoading()
                        });
                        
                        fetch("/verifyRetryPayment", {
                            method: "POST",
                            headers: { "Content-Type": "application/json" },
                            body: JSON.stringify({
                                razorpay_payment_id: response.razorpay_payment_id,
                                razorpay_order_id: response.razorpay_order_id,
                                razorpay_signature: response.razorpay_signature,
                                orderId: '<%= order._id %>',
                                paymentStatus: 'success'
                            })
                        })
                        .then(response => response.json())
                        .then(data => {
                            if (data.success) {
                                Swal.fire({
                                    title: 'Payment Successful!',
                                    text: 'Your order has been processed successfully!',
                                    icon: 'success',
                                    timer: 1500,
                                    showConfirmButton: false
                                }).then(() => {
                                    window.location.href = `/viewOrder/${data.orderId}`;
                                });
                            } else {
                                Swal.fire({
                                    title: 'Error!',
                                    text: 'Payment verification failed. Please try again.',
                                    icon: 'error'
                                });
                            }
                        });
                    },
                    prefill: {
                        name: '<%= user.name %>',
                        email: '<%= user.email %>',
                        contact: '<%= user.phone %>'
                    },
                    theme: { color: "#3399cc" },
                    modal: {
                        ondismiss: function () {
                            Swal.fire({
                                title: 'Payment Canceled',
                                text: 'You canceled the payment. Try again later.',
                                icon: 'warning'
                            });
                        }
                    }
                };

                const razorpay = new Razorpay(options);
                razorpay.open();
            } else {
                Swal.fire({
                    title: 'Error!',
                    text: data.message || 'Failed to initiate payment. Please try again later.',
                    icon: 'error'
                });
            }
        }catch(error){
            console.error('Error:', error);
            Swal.fire({
                title: 'Error!',
                text: 'Something went wrong. Please try again later.',
                icon: 'error'
            });   
        }
    }
</script>

<%- include("../../views/partials/user/footer") %>