<%- include("../../views/partials/user/header") %>

<style>
  .cart-img {
    max-width: 39%;
  }

  .custom-quantity-input {
    display: flex;
    align-items: center;
    border: 1px solid #ddd;
    border-radius: 4px;
    overflow: hidden;
    width: fit-content;
  }

  .remove-btn {
    border: none;
    border-radius: 10px;
  }

  .quantity-btn {
    background: #000000;
    border: none;
    padding: 8px 12px;
    cursor: pointer;
    font-size: 16px;
    transition: background-color 0.2s;
    color: white;
  }

  .quantity-btn:hover {
    background: #303132;
  }

  .quantity-value {
    width: 40px;
    text-align: center;
    border: none;
    border-left: 1px solid #ddd;
    border-right: 1px solid #ddd;
    padding: 8px 0;
    font-size: 14px;
  }

  .quantity-value::-webkit-inner-spin-button,
  .quantity-value::-webkit-outer-spin-button {
    -webkit-appearance: none;
    margin: 0;
  }

  .pagination {
    display: flex;
    justify-content: center;
    align-items: center;
    margin-top: 20px;
    gap: 10px;
  }

  .pagination a,
  .pagination span {
    color: white;
    background-color: #000000;
    padding: 8px 12px;
    margin: 2px;
    border-radius: 5px;
    text-decoration: none;
    font-weight: bold;
    transition: all 0.3s ease;
  }

  .pagination a:hover {
    background-color: #333;
    transform: scale(1.05);
  }

  .pagination .active {
    background-color: #333030;
    color: white;
    cursor: default;
  }

  .pagination .disabled {
    opacity: 0.5;
    cursor: not-allowed;
  }
</style>
<!-- Breadcrumb Section Begin -->
<section class="breadcrumb-option">
  <div class="container">
    <div class="row">
      <div class="col-lg-12">
        <div class="breadcrumb__text">
          <h4>Shopping Cart</h4>
          <div class="breadcrumb__links">
            <a href="/">Home</a>
            <a href="/shop">Shop</a>
            <span>Shopping Cart</span>
          </div>
        </div>
      </div>
    </div>
  </div>
</section>
<!-- Breadcrumb Section End -->

<!-- Shopping Cart Section Begin -->
<section class="shopping-cart spad">
  <div class="container">
    <div class="row">
      <div class="col-lg-8">
        <div class="shopping__cart__table">
          <table>
            <thead>
              <tr>
                <th>Product</th>
                <th>Quantity</th>
                <th>Total</th>
                <th></th>
              </tr>
            </thead>
            <tbody>
              <% if(cart.items.length> 0) { %>
                <% cart.items.forEach(item=> { %>
                  <tr class="<%= !item.productId.isListed ? 'unavailable-product' : '' %>">
                    <td class="product__cart__item">
                      <div class="product__cart__item__pic">
                        <img class="cart-img" src="/Uploads/product-images/<%= item.productId.productImages[0] %>"
                          alt="">
                      </div>
                      <div class="product__cart__item__text">
                        <h6>
                          <%= item.productId.productName %>
                            <% if (!item.productId.isListed) { %>
                              <span class="text-danger">(Product Unavailable)</span>
                              <% } else if (item.productId.category && !item.productId.category.isListed) { %>
                                <span class="text-danger">(Category Unavailable)</span>
                                <% } %>
                        </h6>
                        <h5>₹<%= Number(item.productId.salePrice).toFixed(2) %></h5>
                      </div>
                    </td>
                    <td class="quantity__item">
                      <div class="custom-quantity-input">
                        <button class="quantity-btn"
                          onclick="updateItemQuantity('<%= item.productId._id %>', 'decrease')">-</button>
                        <input type="number" class="quantity-value" value="<%= item.quantity %>" min="1"
                          onchange="updateItemQuantity('<%= item.productId._id %>', 'set', this.value)" readonly>
                        <button class="quantity-btn"
                          onclick="updateItemQuantity('<%= item.productId._id %>', 'increase')">+</button>
                      </div>
                    </td>
                    <td class="cart__price">₹<%= item.totalPrice.toFixed(2) %></td>
                    <td class="cart__close">
                      <button href="javascript:void(0);" class="remove-btn" onclick="confirmRemove('<%= item.productId._id %>')">
                        <i class="fa fa-close"></i>
                      </button>
                    </td>
                  </tr>
                  <% }); %>
                    <% } else { %>
                      <tr>
                        <td colspan="4" class="text-center">No products in the cart</td>
                      </tr>
                      <% } %>
            </tbody>
          </table>
        </div>
        <div class="row">
          <div class="col-lg-6 col-md-6 col-sm-6">
            <div class="continue__btn">
              <a href="/shop">Continue Shopping</a>
            </div>
          </div>
        </div>
      </div>
      <div class="col-lg-4">
        <div class="cart__total">
          <h6>Cart total</h6>
          <ul>
            <li>Subtotal <span>₹<%= cart.cartTotal.toFixed(2) %></span></li>
            <li>Shipping <span>₹40.00</span></li>
            <li>Total <span id="cart-total">₹<%= (cart.cartTotal + 40).toFixed(2) %></span></li>
          </ul>
          <% if (cart.items.length !==0) { %>
            <a href="/checkout" id="checkout-btn" class="primary-btn">Proceed to checkout</a>
            <% } %>
        </div>
      </div>
    </div>
  </div>
</section>

<script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const checkoutBtn = document.getElementById("checkout-btn");

    function checkCartAvailability() {
      const unavailableProductItems = document.querySelectorAll('tr .text-danger');

      if (unavailableProductItems.length > 0) {
        checkoutBtn.addEventListener("click", function (event) {
          event.preventDefault();
          Swal.fire({
            title: "Some items are unavailable!",
            text: "Please remove unavailable products or products from unavailable categories from your cart before proceeding.",
            icon: "warning",
            confirmButtonText: "OK"
          });
        });

        checkoutBtn.classList.add("disabled");
        return false;
      }
      return true;
    }

    checkCartAvailability();
  })

  function confirmRemove(productId) {
    const cartRow = document.querySelector(`button[onclick="confirmRemove('${productId}')"]`).closest('tr'); // Adjusted for button

    Swal.fire({
        title: 'Are you sure?',
        text: "This item will be removed from your cart.",
        icon: 'warning',
        showCancelButton: true,
        confirmButtonColor: '#3085d6',
        cancelButtonColor: '#d33',
        confirmButtonText: 'Yes, remove it!'
    }).then((result) => {
        if (result.isConfirmed) {
            fetch(`/cart/remove/${productId}`, {
                method: "DELETE",
                headers: {
                    "Content-Type": "application/json"
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        cartRow.remove();
                        calculateTotalPrice();
                        const remainingItems = document.querySelectorAll('tr').length - 1; // Adjust for header row if present
                        // Update cart badge with new items count
                        const cartBadge = document.querySelector('.cart-badge');
                        if (cartBadge) {
                            cartBadge.textContent = data.itemsCount || 0;
                        }
                        if (remainingItems <= 0) {
                            // Optional: Redirect or show empty cart message instead of reload
                            // location.reload();
                            Swal.fire('Empty Cart!', 'Your cart is now empty.', 'info');
                        } else {
                            Swal.fire('Removed!', 'Your item has been removed.', 'success');
                        }
                    } else {
                        Swal.fire('Error!', data.message, 'error');
                    }
                })
                .catch(error => {
                    console.error("Error:", error);
                    Swal.fire('Error!', 'Something went wrong.', 'error');
                });
        }
    });
}
  function calculateTotalPrice() {
    const cartRows = document.querySelectorAll('tr');
    let subtotal = 0;

    cartRows.forEach(row => {
      const priceElement = row.querySelector('.cart__price');
      if (priceElement) {
        const priceText = priceElement.textContent.replace('₹', '').trim();
        const price = parseFloat(priceText);
        if (!isNaN(price)) {
          subtotal += price;
        } else {
          console.error(`Invalid price format in cart__price: ${priceText}`);
        }
      }
    });

    document.querySelectorAll('ul li').forEach(li => {
      const text = li.childNodes[0].textContent.trim();
      if (text === 'Subtotal') {
        li.querySelector('span').textContent = `₹${subtotal.toFixed(2)}`;
      }
      if (text === 'Total') {
        li.querySelector('span').textContent = `₹${(subtotal + 40).toFixed(2)}`;
      }
    });

    return subtotal;
  }

  document.addEventListener('DOMContentLoaded', calculateTotalPrice);

  async function updateItemQuantity(productId, action, value = null) {
    let quantityInput = event.target.parentElement.querySelector('.quantity-value');
    let currentQuantity = parseInt(quantityInput.value);
    let newQuantity = currentQuantity;
    newQuantity = action === 'increase' ? currentQuantity + 1 : currentQuantity - 1;
    if (newQuantity > 5) {
      Swal.fire({
        title: 'Error!',
        text: 'You can only order up to 5 items.',
        icon: 'error',
        showConfirmButton: false,
        timer: 1500
      });
      return;
    }
    if (newQuantity < 1) {
      Swal.fire({
        title: 'Error!',
        text: 'You can not order less than 1 item.',
        icon: 'error',
        showConfirmButton: false,
        timer: 1500
      });
      return;
    }
    const response = await fetch('/addToCart', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        productId: productId,
        quantity: action === 'increase' ? 1 : -1
      })
    });
    const data = await response.json();
    if (!response.ok) {
      Swal.fire('Error!', data.message, 'error');
      return;
    }

    if (newQuantity !== currentQuantity) {
      quantityInput.value = newQuantity;

      const priceElement = quantityInput.closest('tr').querySelector('.product__cart__item__text h5');
      const priceText = priceElement.textContent.replace('₹', '').trim();
      const pricePerUnit = parseFloat(priceText);
      if (isNaN(pricePerUnit)) {
        console.error(`Invalid price format in h5: ${priceText}`);
        Swal.fire('Error!', 'Unable to update price due to invalid format.', 'error');
        return;
      }

      const totalPriceElement = quantityInput.closest('tr').querySelector('.cart__price');
      totalPriceElement.textContent = `₹${(pricePerUnit * newQuantity).toFixed(2)}`;

      calculateTotalPrice();
    }
  }
</script>

<%- include("../../views/partials/user/footer") %>