<%- include("../../views/partials/admin/header") %>

    <head>
        <style>
            /* Global Styling */
            body {
                background-color: #ffffff;
                font-family: 'Roboto', sans-serif;
                color: #333;
                line-height: 1.6;
            }

            /* Admin Products Container */
            .admin-products-container {
                margin-top: 40px;
                margin-left: 260px;
                padding: 25px;
                background-color: #ffffff;
                border-radius: 12px;
                box-shadow: 0 4px 10px rgba(0, 0, 0, 0.15);
            }

            /* Heading */
            .headname {
                margin-left: 288px;
                margin-top: 80px;
                font-size: 36px;
                font-weight: bold;
                color: #343a40;
            }

            /* Search Container */
            .search-container {
                display: flex;
                justify-content: center;
                margin-bottom: 20px;
            }

            .search-container .input-group {
                max-width: 500px;
                width: 100%;
                box-shadow: 0 2px 6px rgba(0, 0, 0, 0.1);
            }

            .search-container .form-control {
                border-radius: 8px 0 0 8px;
                border: 1px solid #ced4da;
                height: 45px;
            }

            .searchbtn {
                border: none;
                background-color: white;
                margin-left: 20px;
                margin-right: 25px;
            }

            /* Button Styling */
            .btn-info {
                background-color: #000 !important;
                color: white !important;
                border: none !important;
                padding: 8px 15px;
                border-radius: 6px;
                transition: all 0.3s ease;
            }

            .btn-info:hover {
                background-color: #333 !important;
                transform: translateY(-2px);
                box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
            }

            /* Offer Buttons Styling */
            .add-product-offer,
            .delete-offer {
                display: inline-flex;
                align-items: center;
                justify-content: center;
                height: 40px;
                width: 120px;
                font-weight: 600;
                text-transform: uppercase;
                letter-spacing: 0.5px;
                border: none;
                border-radius: 6px;
                transition: all 0.3s ease;
            }

            .add-product-offer {
                background-color: #28a745;
                color: white;
                font-size: 13px;
            }

            .add-product-offer:hover {
                background-color: #218838;
                transform: translateY(-2px);
                box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
            }

            .delete-offer {
                background-color: #dc3545;
                color: white;
                font-size: 13px;
            }

            .delete-offer:hover {
                background-color: #c82333;
                transform: translateY(-2px);
                box-shadow: 0 3px 6px rgba(0, 0, 0, 0.1);
            }

            /* Products Table */
            .products-table {
                width: 100%;
                border-collapse: collapse;
                border-radius: 8px;
                overflow: hidden;
            }

            .products-table thead {
                background-color: #f8f9fa; /* Light gray background */
                color: #000;
                border-bottom: 2px solid #000;
            }
            .products-table thead th {
                font-weight: 600;
                text-transform: uppercase;
                letter-spacing: 0.5px;
                padding: 12px 15px;
            }

            .products-table th,
            .products-table td {
                padding: 15px;
                vertical-align: middle;
                text-align: left;
            }

            .products-table th {
                font-weight: bold;
                font-size: 16px;
                text-transform: uppercase;
                letter-spacing: 0.5px;
            }

            .products-table tbody tr {
                border-bottom: 1px solid #e9ecef;
                transition: background-color 0.3s ease;
            }

            .products-table tbody tr:nth-child(even) {
                background-color: #ffffff;
            }

            .products-table tbody tr:hover {
                background-color: rgba(0, 0, 0, 0.05);
            }

            /* Pagination Styling */
            
            .pagination {
                display: flex;
                justify-content: center;
                margin-top: 30px;
            }

            .pagination .page-item {
                margin: 0 5px;
            }

            .pagination .btn {
                margin: 0 5px;
                padding: 10px 15px;
                border-radius: 8px;
                font-weight: bold;
            }

            .pagination .btn-outline-primary {
                color: #000000;
                border: 1px solid #000000;
                background-color: #fff;
            }

            .pagination .btn-outline-primary:hover {
                background-color: #252323;
                color: white;
            }

            .pagination .btn-primary {
                background-color: #000000;
                color: white;
            }

            .pagination .btn-primary:hover {
                background-color: #252323;
            }

            /* Form Checkbox */
            .form-check-input {
                width: 30px;
                height: 20px;
                margin-right: 10px;
            }

            .status-label {
                font-weight: bold;
            }

            /* Offer Modal Styling */
            .offer-modal {
                display: none;
                position: fixed;
                z-index: 1000;
                left: 0;
                top: 0;
                width: 100%;
                height: 100%;
                overflow: auto;
                background-color: rgba(0, 0, 0, 0.4);
                backdrop-filter: blur(5px);
            }

            .offer-modal-content {
                background-color: #fefefe;
                margin: 10% auto;
                padding: 25px;
                border-radius: 12px;
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1), 0 1px 3px rgba(0, 0, 0, 0.08);
                width: 100%;
                max-width: 500px;
                animation: slideIn 0.3s ease-out;
            }

            @keyframes slideIn {
                from {
                    opacity: 0;
                    transform: translateY(-20px);
                }

                to {
                    opacity: 1;
                    transform: translateY(0);
                }
            }

            .offer-modal-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                border-bottom: 1px solid #e0e0e0;
                padding-bottom: 15px;
                margin-bottom: 20px;
            }

            .offer-modal-header h4 {
                margin: 0;
                font-weight: 600;
                color: #333;
            }

            .offer-modal-close {
                color: #aaa;
                font-size: 28px;
                font-weight: bold;
                cursor: pointer;
                transition: color 0.3s ease;
            }

            .offer-modal-close:hover,
            .offer-modal-close:focus {
                color: #000;
                text-decoration: none;
            }

            #productOfferForm .form-group {
                margin-bottom: 20px;
            }

            #productOfferForm .form-label {
                font-weight: 500;
                color: #555;
                margin-bottom: 8px;
            }

            #productOfferForm .form-control {
                border-radius: 6px;
                padding: 10px 15px;
                border: 1px solid #ddd;
                transition: all 0.3s ease;
            }

            #productOfferForm .form-control:focus {
                border-color: #ffa500;
                box-shadow: 0 0 0 0.2rem rgba(255, 165, 0, 0.25);
            }

            #productOfferForm button[type="submit"] {
                background: linear-gradient(45deg, #ffa500, #ffd700);
                color: white;
                border: none;
                padding: 12px 20px;
                font-weight: 600;
                text-transform: uppercase;
                letter-spacing: 1px;
                transition: all 0.3s ease;
                border-radius: 6px;
            }

            #productOfferForm button[type="submit"]:hover {
                background: linear-gradient(45deg, #ff8c00, #ffc000);
                transform: translateY(-1px);
                box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1);
            }

            #productOfferForm button[type="submit"]:active {
                transform: translateY(0);
                box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1);
            }

            /* Responsive Adjustments */
            @media (max-width: 576px) {
                .offer-modal-content {
                    margin: 20% auto;
                    width: 90%;
                    padding: 15px;
                }

                .admin-products-container {
                    margin-left: 0;
                    padding: 15px;
                }

                .headname {
                    margin-left: 0;
                    text-align: center;
                }
            }
            .product-image{
                width: 50px;
                height: 50px;
                object-fit: cover;
            }
            
        </style>
    </head>

    <div class="headname">Products Management</div>
    <div class="admin-products-container">
        <div class="search-container">
            <form action="" method="get" class="w-100">
                <div class="input-group">
                    <input type="text" style="padding-left: 68px;" class="form-control" placeholder="Search products"
                        name="search" value="<%= searchTerm || '' %>">
                    <button class="searchbtn" type="submit">Search</button>
                </div>
            </form>
        </div>

        <div class="table-responsive">
            <table class="table products-table">
                <thead>
                    <tr>
                        <th>Product Name</th>
                        <th>Category</th>

                        <th>Sale Price</th>
                        <!-- <th>Regular Price</th> -->
                        <th>Offer</th>
                        <th>Quantity</th>
                        <th>Edit</th>
                        <th>List / Unlist</th>
                        <th>Offer MGt.</th>

                    </tr>
                </thead>
                <tbody>
                    <% data.forEach(function(product) { %>
                        <tr class="div-product" data-product-id="<%= product._id %>">
                            <td style="display: flex; align-items: center;">
                                <img class="product-image" src="/uploads/product-images/<%= product.productImages[0] %>"
                                    alt="<%= product.productName %>">
                                <%= product.productName %>
                            </td>
                            <td> 
                                <%= product.category ? product.category.name : 'No Category' %>
                            </td>
                            <td>₹<%= product.salePrice %>
                            </td>
                            <td>
                                <%= product.productOffer ? product.productOffer : 'No Offer' %>
                            </td>
                            <td>
                                <%= product.quantity %>
                            </td>
                            <td>
                                <a href="/admin/editProduct?id=<%= product._id %>" class="btn btn-info" 
                                    style="text-decoration: none;"
                                    >Edit</a>
                            </td>
                            <td>
                                <div class="form-check form-switch d-flex align-items-center justify-content-start">
                                    <input type="checkbox" class="form-check-input toggle-status"
                                        data-id="<%= product._id %>" <%=product.isListed ? 'checked' : '' %>
                                    />
                                    <span
                                        class="status-label ms-2 <%= product.isListed ? 'text-success' : 'text-danger' %>">
                                        <%= product.isListed ? 'Listed' : 'Unlisted' %>
                                    </span>
                                </div>
                            </td>
                            <td>
                                <% if (product.productOffer && product.productOffer> 0) { %>
                                    <button class="btn btn-danger btn-sm delete-offer"
                                        data-product-id="<%= product._id %>">
                                        <i class="fas fa-trash"></i> Delete Offer
                                    </button>
                                    <% } else { %>
                                        <button class="btn btn-primary btn-sm add-product-offer"
                                            data-product-id="<%= product._id %>"
                                            data-product-name="<%= product.productName %>">
                                            <i class="fas fa-percent"></i> Add Offer
                                        </button>
                                        <% } %>
                            </td>
                        </tr>
                        <% }); %>
                </tbody>
            </table>
        </div>

        <div class="pagination">
            <% if (currentPage> 1) { %>
                <a href="?page=<%= currentPage - 1 %><%= searchTerm ? '&search=' + searchTerm : '' %>"
                    class="btn btn-outline-primary">Previous</a>
                <% } %>

                    <% for (let i=1; i <=totalPages; i++) { %>
                        <a href="?page=<%= i %><%= searchTerm ? '&search=' + searchTerm : '' %>"
                            class="btn <%= currentPage == i ? 'btn-primary' : 'btn-outline-primary' %>">
                            <%= i %>
                        </a>
                        <% } %>

                            <% if (currentPage < totalPages) { %>
                                <a href="?page=<%= currentPage + 1 %><%= searchTerm ? '&search=' + searchTerm : '' %>"
                                    class="btn btn-outline-primary">Next</a>
                                <% } %>
        </div>
    </div>

    <div id="productOfferModal" class="offer-modal">
        <div class="offer-modal-content">
            <div class="offer-modal-header">
                <h4>Add Product Offer</h4>
                <span class="offer-modal-close">&times;</span>
            </div>
            <form id="productOfferForm">
                <input type="hidden" id="offerProductId" name="productId">
                <div class="form-group mb-3">
                    <label for="productName" class="form-label">Product Name</label>
                    <input type="text" class="form-control" id="offerProductName" readonly>
                </div>
                <div class="form-group mb-3">
                    <label for="offerPercentage" class="form-label">Offer Percentage</label>
                    <input type="number" class="form-control" id="offerPercentage" name="offerPercentage" min="0"
                        max="100" placeholder="Enter offer percentage">
                </div>
                <!-- <div class="form-group mb-3">
                <label for="offerStartDate" class="form-label">Start Date</label>
                <input type="date" class="form-control" id="offerStartDate" name="offerStartDate">
            </div> -->
                <div class="form-group mb-3">
                    <label for="offerEndDate" class="form-label">End Date</label>
                    <input type="date" class="form-control" id="offerEndDate" name="offerEndDate">
                </div>
                <button type="submit" class="btn btn-success w-100">Save Offer</button>
            </form>
        </div>
    </div>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('.toggle-status').forEach(toggle => {
                toggle.addEventListener('change', function () {
                    const productId = this.getAttribute('data-id');
                    const statusLabel = this.nextElementSibling;
                    const isListed = this.checked;

                    // Show confirmation dialog

                    Swal.fire({
                        title: 'Confirm Status Change',
                        text: `Are you sure you want to ${isListed ? 'list' : 'unlist'} this product?`,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes, change it!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            // Proceed with status change
                            fetch(`/admin/toggle-list/${productId}`, {
                                method: 'PATCH',
                                headers: {
                                    'Content-Type': 'application/json'
                                },
                                body: JSON.stringify({ isListed })
                            })
                                .then(response => response.json())
                                .then(data => {
                                    if (data.success) {
                                        // Update status label and styling
                                        if (data.isListed) {
                                            statusLabel.textContent = 'Listed';
                                            statusLabel.classList.remove('text-danger');
                                            statusLabel.classList.add('text-success');
                                        } else {
                                            statusLabel.textContent = 'Unlisted';
                                            statusLabel.classList.remove('text-success');
                                            statusLabel.classList.add('text-danger');
                                        }

                                        // Show success toast
                                        Swal.fire({
                                            icon: 'success',
                                            title: 'Product Status Updated',
                                            text: data.message,
                                            toast: true,
                                            position: 'top-end',
                                            showConfirmButton: false,
                                            timer: 2000
                                        });
                                    } else {
                                        // Revert toggle if API call fails
                                        this.checked = !isListed;

                                        // Show error message
                                        Swal.fire({
                                            icon: 'error',
                                            title: 'Error',
                                            text: data.message || 'Failed to update product status'
                                        });
                                    }
                                })
                                .catch(error => {
                                    console.error('Error:', error);

                                    // Revert toggle
                                    this.checked = !isListed;

                                    // Show network error
                                    Swal.fire({
                                        icon: 'error',
                                        title: 'Network Error',
                                        text: 'Unable to update product status'
                                    });
                                });
                        } else {
                            // Revert toggle if user cancels
                            this.checked = !isListed;
                        }
                    });
                });
            });
        });



        document.addEventListener('DOMContentLoaded', function () {
            // Modal elements
            const modal = document.getElementById('productOfferModal');
            const closeBtn = document.querySelector('.offer-modal-close');
            const addOfferButtons = document.querySelectorAll('.add-product-offer');
            const offerForm = document.getElementById('productOfferForm');

            // Add click event listeners to all "Add Offer" buttons
            addOfferButtons.forEach(button => {
                button.addEventListener('click', function () {
                    const productId = this.getAttribute('data-product-id');
                    const productName = this.getAttribute('data-product-name');

                    document.getElementById('offerProductId').value = productId;
                    document.getElementById('offerProductName').value = productName;

                    modal.style.display = 'block';
                });
            });

            // Close modal when clicking the close button
            closeBtn.addEventListener('click', function () {
                modal.style.display = 'none';
            });

            // Close modal when clicking outside
            window.addEventListener('click', function (event) {
                if (event.target === modal) {
                    modal.style.display = 'none';
                }
            });

            // Handle form submission
            offerForm.addEventListener('submit', function (e) {
                e.preventDefault();

                const productId = document.getElementById('offerProductId').value;
                const offerPercentage = document.getElementById('offerPercentage').value;
                // const startDate = document.getElementById('offerStartDate').value;
                const endDate = document.getElementById('offerEndDate').value;

                // Validate dates
                if (new Date(endDate) <= new Date()) {
                    Swal.fire({
                        icon: 'error',
                        title: 'Invalid Dates',
                        text: 'End date must be after start date'
                    });
                    return;
                }

                fetch('/admin/addProductOffer', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({
                        productId,
                        offerPercentage,
                        // startDate,
                        endDate
                    })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Offer Added Successfully!',
                                showConfirmButton: false,
                                timer: 1500
                            });

                            // Update the UI
                            updateUIAfterAddingOffer(productId, offerPercentage);

                            // Close modal and reset form
                            modal.style.display = 'none';
                            offerForm.reset();
                        } else {
                            Swal.fire({
                                icon: 'error',
                                title: 'Failed to Add Offer',
                                text: data.message
                            });
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'An error occurred',
                            text: 'Please try again later'
                        });
                    });
            });

            // Function to update UI after adding offer
            function updateUIAfterAddingOffer(productId, offerPercentage) {
                const row = document.querySelector(`tr[data-product-id="${productId}"]`);
                if (row) {
                    // Update offer display column
                    const offerColumn = row.querySelector('td:nth-child(4)');
                    if (offerColumn) {
                        offerColumn.textContent = `${offerPercentage}%`;
                    }

                    // Only replace with delete button if offer percentage is greater than 0
                    if (offerPercentage > 0) {
                        const actionColumn = row.querySelector('td:last-child');
                        if (actionColumn) {
                            actionColumn.innerHTML = `
                    <button class="btn btn-danger btn-sm delete-offer" 
                            data-product-id="${productId}">
                        <i class="fas fa-trash"></i> Delete Offer
                    </button>
                `;

                            // Add event listener to new delete button
                            const deleteButton = actionColumn.querySelector('.delete-offer');
                            deleteButton.addEventListener('click', function () {
                                handleDeleteOffer(productId);
                            });
                        }
                    }
                }
            }

            // Function to handle offer deletion
            function handleDeleteOffer(productId) {
                Swal.fire({
                    title: 'Are you sure?',
                    text: 'Do you want to delete this offer?',
                    icon: 'warning',
                    showCancelButton: true,
                    confirmButtonColor: '#3085d6',
                    cancelButtonColor: '#d33',
                    confirmButtonText: 'Yes, delete it!'
                }).then((result) => {
                    if (result.isConfirmed) {
                        deleteOffer(productId);
                    }
                });
            }

            // Function to delete offer
            function deleteOffer(productId) {
                fetch('/admin/deleteProductOffer', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                    },
                    body: JSON.stringify({ productId })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            Swal.fire({
                                icon: 'success',
                                title: 'Offer Deleted Successfully!',
                                showConfirmButton: false,
                                timer: 1500
                            });

                            // Update UI after deleting offer
                            updateUIAfterDeletingOffer(productId);
                        } else {
                            throw new Error(data.message || 'Failed to delete offer');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: error.message || 'Failed to delete offer'
                        });
                    });
            }

            // Function to update UI after deleting offer
            function updateUIAfterDeletingOffer(productId) {
                const row = document.querySelector(`tr[data-product-id="${productId}"]`);
                if (row) {
                    // Reset offer display column
                    const offerColumn = row.querySelector('td:nth-child(4)'); // Adjust index if needed
                    if (offerColumn) {
                        offerColumn.textContent = 'No Offer';
                    }

                    // Restore "Add Offer" button
                    const actionColumn = row.querySelector('td:last-child');
                    if (actionColumn) {
                        const productName = row.querySelector('td:first-child').textContent;
                        actionColumn.innerHTML = `
                    <button class="btn btn-primary btn-sm add-product-offer" 
                            data-product-id="${productId}"
                            data-product-name="${productName}">
                        <i class="fas fa-percent"></i> Add Offer
                    </button>
                `;

                        // Re-attach event listener to new add offer button
                        const addButton = actionColumn.querySelector('.add-product-offer');
                        addButton.addEventListener('click', function () {
                            document.getElementById('offerProductId').value = productId;
                            document.getElementById('offerProductName').value = productName;
                            modal.style.display = 'block';
                        });
                    }
                }
            }

            // Initialize delete offer buttons for existing offers
            document.querySelectorAll('.delete-offer').forEach(button => {
                button.addEventListener('click', function () {
                    const productId = this.getAttribute('data-product-id');
                    handleDeleteOffer(productId);
                });
            });
        });

        // Status toggle functionality
        document.addEventListener('DOMContentLoaded', function () {
            document.querySelectorAll('.toggle-status').forEach(toggle => {
                toggle.addEventListener('change', function () {
                    const productId = this.getAttribute('data-id');
                    const statusLabel = this.nextElementSibling;
                    const isListed = this.checked;

                    Swal.fire({
                        title: 'Confirm Status Change',
                        text: `Are you sure you want to ${isListed ? 'list' : 'unlist'} this product?`,
                        icon: 'warning',
                        showCancelButton: true,
                        confirmButtonColor: '#3085d6',
                        cancelButtonColor: '#d33',
                        confirmButtonText: 'Yes, change it!'
                    }).then((result) => {
                        if (result.isConfirmed) {
                            updateProductStatus(productId, isListed, this, statusLabel);
                        } else {
                            this.checked = !isListed;
                        }
                    });
                });
            });

            function updateProductStatus(productId, isListed, toggleElement, statusLabel) {
                fetch(`/admin/toggle-list/${productId}`, {
                    method: 'PATCH',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify({ isListed })
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            // Update status label
                            statusLabel.textContent = isListed ? 'Listed' : 'Unlisted';
                            statusLabel.className = `status-label ms-2 ${isListed ? 'text-success' : 'text-danger'}`;

                            Swal.fire({
                                icon: 'success',
                                title: 'Status Updated',
                                text: data.message,
                                toast: true,
                                position: 'top-end',
                                showConfirmButton: false,
                                timer: 2000
                            });
                        } else {
                            throw new Error(data.message || 'Failed to update status');
                        }
                    })
                    .catch(error => {
                        console.error('Error:', error);
                        toggleElement.checked = !isListed;

                        Swal.fire({
                            icon: 'error',
                            title: 'Error',
                            text: error.message || 'Failed to update status'
                        });
                    });
            }
        });
    </script>

    <!-- Ensure SweetAlert2 is included -->
    <script src="https://cdn.jsdelivr.net/npm/sweetalert2@11"></script>

    <%- include("../../views/partials/admin/footer") %>